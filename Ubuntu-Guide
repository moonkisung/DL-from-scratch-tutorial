---
tags:
- linux/ubuntu
---

[[How to Use Docker, Kor]]

# 우분투 설치 시

/boot 파티션은 별도로 나누면 향후 번거롭다. (옛날 방식)

최근에는 /(루트)의 용량이 크기 때문에 굳이 나눌 필요가 없음





# 소유권 설정

기본적인 소유권에 관한 설정은 chmod나 chown을 사용한다.  (ch = change의 약자)

그러나 chmod나 chown으로 설정할 수 있는 소유자 권한은 한정적이므로 더 많은 기능을 사용할 때는 ACL을 사용한다.



```shell
chown -R [owner name]:[group name][filename or directory]

ex)
chown -R ym /hdd/ym
```



```shell
chmod 777 [fileName]
```





# Sudo 권한 주기

```shell
usermod -aG sudo username
```
권한을 주고 난 뒤 로그아웃 → 로그인을 해야 제대로 sudo 권한이 적용됨


# 계정 관리


## 계정 생성

```shell
useradd는 전부 설정해줘야 함
sudo useradd [id]

adduser가 한 번에 셋팅 다 됨 (루트 폴더까지)
sudo adduser [id]

```


## 계정 목록 확인

```shell
cat /etc/passwd
cut -f1 -d: /etc/passwd
```


## 계정 삭제

```Shell
sudo userdel [username]
sudo userdel -rf [username] # 홈 디렉토리를 포함한 모든 정보 삭제

```



# curl 명령어

```shell
# 원본 파일 그대로 저장
curl -O https://repo.anaconda.com/archive/Anaconda3-5.3.1-Linux-x86_64.sh

#사용자 이름으로 파일명 저장
curl -o anaconda3.sh https://repo.anaconda.com/archive/Anaconda3-5.3.1-Linux-x86_64.sh

```

다운로드 시 `wget`와 같이 주로 사용

`wget`이 default로 설치되지 않은 것과는 달리 curl은 설치되어 있는 것으로 확인됨

`apt install curl`이 안 될 때는 `apt update`로 업데이트를 할 것.


# cat 명령어

`cat [fileName]` 해당 파일을 출력한다.

`cat > [fileName]` 파일을 생성한다. 안에 내용을 입력할 수 있는데 저장은 `ctrl+D`이다.



# echo 명령어

기본적으로 무언가를 출력하는 명령어지만 이를 파일로도 만들 수 있기 때문에 매우 자주 쓰인다.

`echo "string"` 기본적인 출력 명령어

`echo "string" > [fileName]` 



# watch 명령어
`nvidia-smi` 와 같이 실시간으로 확인이 필요한 명령어를 사용 시 `watch` 명령어를 사용한다.

```shell
# 1초 간격으로 nvidia-smi를 refresh 하여 나타냄
# 여기서 -d 는 변경 부분을 하이라이트 시켜 화면에 나타낸다.
# -n 은 --interval=<seconds>를 나타냄
watch -d -n 1 nvidia-smi
watch -d -n 5 'cat /proc/uptime'

```

## REF
[watch 명령을 이용한 linux 시스템 모니터링 | SharedIT - IT 지식 공유 네트워크](https://www.sharedit.co.kr/posts/2000)



# 디스크 용량 확인하기

```shell
#inode 남은 공간, 사용 공간, 사용 퍼센트 출력
df -i 

#사람이 읽을 수 있는 단위로 출력
df -h 

#1KB를 1000단위로 용량 표시
df -H 

du
```



# 의존성 문제

```shell
#의존성 문제 발생 시 의존성이 맞지 않는 부분 확인
sudo dpkg --configure -a

sudo apt-get --fix-broken install

#파티션이 꽉차면 autoremove 사용 (구버전이 있을 경우)
sudo apt-get autoremove

autoremove 
```



## /boot 파티션이 꽉 찼을 시

```shell
uname -a
Linux kwon-System-Product-Name 5.4.0-104-generic #118~18.04.1-Ubuntu SMP Thu Mar 3 13:53:15 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux

#5.4.0-104-generic 이게 리눅스 버전
#이 버전을 제외한 나머지 리눅스 버전 삭제
apt-get remove linux-image-4.4.0-21-generic

#다만 이것도 /boot 디렉토리가 꽉 찼을 시 먹히지 않음
#이럴 땐 boot 디렉토리에 직접 접근할 것

cd /boot
ls
System.map-5.4.0-100-generic  config-5.4.0-100-generic  efi   initrd.img-5.4.0-100-generic  lost+found      memtest86+.elf            vmlinuz-5.4.0-100-generic
System.map-5.4.0-104-generic  config-5.4.0-104-generic  grub  initrd.img-5.4.0-104-generic  memtest86+.bin  memtest86+_multiboot.bin  vmlinuz-5.4.0-104-generic

#여기서 위 uname -a에서 나온 리눅스 버전과 맞지 않는 나머지 버전들의 4가지를 삭제해서 용량 확보
#<System.map-5.4.0-104-generic config-5.4.0-104-generic initrd.img-5.4.0-104-generi vmlinuz-5.4.0-104-generic>

```



# NFS와 Mount

```shell
#nfs 설치
sudo apt-get install nfs-common

#NAS 마운트 ( -t 없이 해도 상관없음)
mount -t nfs [아이피]:[NAS 경로] [워크스테이션 디렉토리 경로]
mount -t nfs ip_number:/nas_path /directory
mount -t nfs 10.125.220.161:/volume1/project /mnt/nas1
mount -t nfs 10.125.220.161:/volume1/project /mnt/nas/project
mount -t nfs 10.125.220.161:/volume1/homes /mnt/nas/homes

#type error가 뜬다면 -t 없이 작성
mount 10.125.220.161:/volume1/project /mnt/nas1

#NAS의 경로는 시놀로지에 접속해서 확인가능
#/volume1/project 연구실 NAS 경로
```


mount는 재부팅 시 초기화 되므로 fstab에 등록해야 함

```shell
vim /etc/fstab

# /etc/fstab: static file system information.
#
# Use 'blkid' to print the universally unique identifier for a
# device; this may be used with UUID= as a more robust way to name devices
# that works even if disks are added and removed. See fstab(5).
#
# <file system> <mount point>   <type>  <options>       <dump>  <pass>
# / was on /dev/nvme0n1p2 during installation
UUID=f274ab16-9002-4a87-a47b-405f9edee7cf /               ext4    errors=remount-ro 0       1
# /boot/efi was on /dev/nvme0n1p1 during installation
UUID=8C00-8117  /boot/efi       vfat    umask=0077      0       1
/swapfile                                 none            swap    sw              0       0
# NAS
10.125.220.161:/volume1/project /mnt/nas1       nfs     defaults	rw      0       0
10.125.220.161:/volume1/homes /mnt/nas/homes/   nfs     defaults        rw      0       0
10.125.220.161:/volume1/project /mnt/nas/project        nfs     defaults        rw      0       0

```





## REF

[재부팅 NAS 자동 마운트 (nfs) | 개발자 상현에 하루하루 (hyeon.pro)](https://hyeon.pro/dev/reboot-nfs-auto-mount/)


# htop (cpu 실시간 확인)

```shell
sudo apt install htop

htop

```



# bash에서 tab 자동완성이 안 될 때

```shell
sudo apt install bash-completion

sudo vim /root/.bashrc

#아래 부분 주석 제거
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
   . /etc/bash_completion
   
sudo -s source /root/.bashrc
```



# Nvidia Drivier 세팅

## Nvidia Driver 설치하기

```shell
sudo lshw -C display

[sudo] password for kwon:
  *-display
       description: VGA compatible controller
       product: NVIDIA Corporation
       vendor: NVIDIA Corporation
       physical id: 0
       bus info: pci@0000:1a:00.0
       version: a1
       width: 64 bits
       clock: 33MHz
       capabilities: pm msi pciexpress vga_controller bus_master cap_list rom
       configuration: driver=nvidia latency=0
       resources: irq:99 memory:b4000000-b4ffffff memory:a0000000-afffffff memory:b0000000-b1ffffff ioport:7000(size=128) memory:b5000000-b507ffff
  *-display
       description: VGA compatible controller
       product: NVIDIA Corporation
       vendor: NVIDIA Corporation
       physical id: 0
       bus info: pci@0000:68:00.0
       version: a1
       width: 64 bits
       clock: 33MHz
       capabilities: pm msi pciexpress vga_controller bus_master cap_list rom
       configuration: driver=nvidia latency=0
       resources: irq:100 memory:d7000000-d7ffffff memory:c0000000-cfffffff memory:d0000000-d1ffffff ioport:b000(size=128) memory:c0000-dffff

```

lshw 명령어를 통해 그래픽 카드의 정보를 확인



```
ubuntu-drivers devices

== /sys/devices/pci0000:16/0000:16:00.0/0000:17:00.0/0000:18:10.0/0000:1a:00.0 ==
modalias : pci:v000010DEd00002204sv00001458sd00004043bc03sc00i00
vendor   : NVIDIA Corporation
driver   : nvidia-driver-470-server - distro non-free
driver   : nvidia-driver-460 - distro non-free
driver   : nvidia-driver-495 - distro non-free
driver   : nvidia-driver-470 - distro non-free recommended
driver   : nvidia-driver-460-server - distro non-free
driver   : xserver-xorg-video-nouveau - distro free builtin

```

recommended 된 드라이버를 설치한다



설치는 순서는 아래와 같다

```shell
sudo add-apt-repository ppa:graphics-drivers/ppa
sudo apt update

sudo apt-get install nvidia-driver-470

sudo reboot
```



만약 기존에 설치된 파일이 남아있을 경우 아래 명령어를 통해 삭제할 것

```shell
sudo apt --purge autoremove nvidia*
```





## nvidia-docker2 설치

```shell
docker: Error response from daemon: could not select device driver "" with capabilities: [[gpu]].
```

위와 같은 오류가 발생했다면 nvidia-container-toolkit을 설치해야 한다.

![nvidia-docker2](https://blog.kakaocdn.net/dn/baaAJh/btrtCUw7mUO/42JJ0UbmTPKqPWHlz8uNLK/img.png)


```Shell
distribution=$(. /etc/os-release;echo $ID$VERSION_ID) \
      && curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \
      && curl -s -L https://nvidia.github.io/libnvidia-container/$distribution/libnvidia-container.list | \
            sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \
            sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list


sudo apt-get update

sudo apt-get install -y nvidia-docker2

sudo systemctl restart docker

sudo docker run --rm --gpus all nvidia/cuda:11.0.3-base-ubuntu20.04 nvidia-smi



```



## REF

[Docker NVIDIA Container Toolkit(NVIDIA Docker)의 동작원리 (tistory.com)](https://engineer-mole.tistory.com/265)

[우분투 18.04 - NVIDIA 드라이버를 설치하는 방법 (codechacha.com)](https://codechacha.com/ko/install-nvidia-driver-ubuntu/)

[nvidia-docker 와 nvidia container runtime의 차이 (tistory.com)](https://koobh.tistory.com/60)

[Installation Guide — NVIDIA Cloud Native Technologies documentation](https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html)

# Snap 삭제 방법

Snap이란? 

우분투에서 자체 지원하는 패키지 관리자로 apt와 비슷한 기능



```shell
#snap list로 snap 패키지 리스트 확인
snap list

# 패키지 삭제
snap remove --purge snap-store
snap remove --purge gtk-common-themes
snap remove --purge gnome-3-38-2004

snap remove --purge core20 
snap remove --purge bare 

#위의 순서대로 삭제 하면 된다. 
#core20 삭제는 snapd에서 사용 중이라 실패 할 수 도 있는데 상관말고 다음 단계로 진행 하면 삭제 됨.
#snapd 는 다음 단계에서 삭제 가능


#snap core에서 사용 중인 마운트 해제
umount /snap/core20/1405
umount /snap/core20/1434


#snapd 삭제
apt autoremove --purge snapd


#남아 있는 snap 폴더들 삭제 
rm -rf ~/snap
sudo rm -rf /snap
sudo rm -rf /var/snap
sudo rm -rf /var/lib/snapd


#snapd를 설치 안 되게 마크 하기
apt-mark hold snapd 

```





## REF

[Ubuntu 20.04 free from Snaps by following these simple steps | Ubunlog](https://ubunlog.com/en/a-las-bravas-como-liberar-a-ubuntu-20-04-de-la-tirania-de-los-snaps/)

[Daddy Makers: 우분투 업데이트, 용량 늘리기 및 각종 에러 해결 방법 (daddynkidsmakers.blogspot.com)](http://daddynkidsmakers.blogspot.com/2020/07/apt-update.html)

[Ubuntu 18.04에서는 Snap을 기본 패키지 관리자로 사용 — Steemit](https://steemit.com/ubuntu/@calmglow/ubuntu-18-04-snap)



# SSH 세팅

## SSH 설치
```shell
sudo apt update
sudo apt install openssh-server
```

설치 후 `systemctl`을 통해 작동하는지 확인이 가능하다.

```shell
sudo systemctl status ssh

sudo systemctl enable ssh
sudo systemctl start ssh

sudo ufw allow ssh # 이건 ufw allow 22이랑 같으므로 ssh 포트가 다른 포트면 ssh가 아닌 해당 포트 번호로 allow 해야함
```


## SSH 포트 변경

`/etc/ssh/sshd_config`에서 포트 번호 변경 가능

변경 이후 `service ssh restart` 를 통해 재적용 시킨다

`netstat -tnlp`로 port 번호 확인 가능


## SSH Root 직접 로그인 허용 유무

`/etc/ssh/sshd_config` 에서 변경이 가능 

```shell
PermitRootLogin no

# 주석 제거와 no를 해주면 된다.
```


# Hostname 변경하기
## 명령어 모음

| 명령어                                | 역할                    |
| ------------------------------------- | ----------------------- |
| hostnamectl status                    | 현재 호스트명 설정 조회 |
| hostnamectl set-hostname `호스트명`   | 시스템 호스트명 설정    |
| hostnamectl set -icon-name `아이콘명` | 호스트 아이콘명 설정    |
| hostnamectl set -chasssis `섀시명`    | 호스트명 섀시 유형 설정 |


## hosts 수정
`sudo` 권한으로 `vim /etc/hosts` 를 수정한다.

127.0.1.1의 기존에 있던 hostname을 삭제하고 새롭게 정의한 hostname을 넣어준다.


## REF
[linux hostname(리눅스 호스트네임) 설정하는 법 (lesstif.com)](https://www.lesstif.com/lpt/linux-hostname-105644119.html)

[127.0.0.1 과 localhost의 차이 (intrepidgeeks.com)](https://intrepidgeeks.com/tutorial/difference-between-127001-and-localhost)

[ubuntu 20.04 hostname 변경:hostnamectl 사용 (tistory.com)](https://seonghyuk.tistory.com/199)


# 방화벽 설정

우분투를 비롯한 리눅스에서 가장 많이 쓰이는 방화벽은 iptables이다. 

그러나 iptables는 넓은 기능을 가지고 있지만 사용법이 까다로워 러닝커브가 높다는 단점이 있다.

우분투에서는 iptables를 조금 더 쉽게 쓸 수 있도록 ufw 라는 소프트웨어를 제공한다. 

ufw 또한 근본적으로는 iptables를 사용하는 것은 동일하지만 조금 더 사용자 편의적으로 만들었다고 볼 수 있다.

다만 그만큼 세부적인 설정은 불가능하므로 전문적인 보안 설정에는 ufw보단 iptables를 직접 사용하는 것이 권장된다.



## UFW 명령어

### 기본 세팅

가장 기본이 되는 Rule이 존재하는데 incoming, outgoing, routed다.

이는 `ufw status verbose`를 통해 확인이 가능하다.

```shell
sudo ufw status verbose

Status: active
Logging: on (low)
Default: deny (incoming), allow (outgoing), deny (routed)
New profiles: skip
```

default의 설정은 아래와 같이 설정할 수 있다.

```shell
sudo ufw default deny incoming
sudo ufw default allow outcoming
sudo ufw default allow routed
```

여기서 중요한 것은 `ufw deny incoming` 인데 외부에서 내부로 들어오는 기본 값은 기본적으로 반드시 `deny`로 설정한다.

모두 틀어막은 상태에서 특정한 port만 열어야 보안적으로 안전하다.


```shell
ufw allow from 164.125.219.140 # ip에 대해 모두 열음
ufw allow from 164.125.219.140 to any port 8888
ufw allow from 164.125.219.141 to any port 8888
ufw allow from 164.125.219.142 to any port 8888
ufw allow from 164.125.219.143 to any port 8888
ufw allow from 164.125.219.144 to any port 8888
ufw allow from 164.125.219.150 to any port 8888
```

```shell
포트가 여러 개면 반드시 tcp나 udp를 명시해야 함 (주피터는 tcp만 허용해도 사용 가능)
ufw allow from 10.125.219.140 to any port 6006:6020 proto tcp 
ufw allow from 10.125.219.150 to any port 6006:6020 proto tcp 
ufw allow from 164.125.219.140 to any port 6006:6009 proto udp
ufw allow from 164.125.219.144 to any port 6006:6009 proto tcp 
ufw allow from 164.125.219.150 to any port 6006:6009 proto tcp
```



### 넘버링 된 것 보기

```shell
sudo ufw status numbered

sudo ufw delete [number]

sudo ufw insert [number] command
ex) sudo ufw insert 14 allow from 164.125.219.140 to any port 8888

echo "y" | ufw delete [number]

```



### 재적용

```shell
sudo systemctl
혹은
sudo ufw disable
sudo ufw enable

```

## 방화벽 끄기

```shell
sudo ufw disable
sudo systemctl disable ufw
```



## 방화벽 REF

[ufw 정책이 docker 컨테이너에 적용이 안될때. | 마르스 블로그 (lasel.kr)](https://lasel.kr/archives/536)

[Ubuntu 일반 사용자에게 sudo 권한주기. – Blog-boxcorea](https://blog.boxcorea.com/wp/archives/2847)

[TWpower's Tech Blog](https://twpower.github.io/64-use-chown-to-subfiles-and-subfolders)

[우분투 방화벽 설정 (tistory.com)](https://wlsvud84.tistory.com/23)

[useradd와 adduser의 차이 (tistory.com)](https://kit2013.tistory.com/187)

[[ Ubuntu \] UFW를 활용한 방화벽 설정 방법 (tistory.com)](https://dev-joo.tistory.com/60)



# 기본 pip 경로 변경

```shell
which pip


# ~/.bashrc에서 설정 변경
alias python_default='.../bin/python3'
alias python_conda='.../bin/python3'
```

